name: Deploy to EC2 with Docker

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Sprawdzenie kodu z repozytorium
      - name: Checkout code
        uses: actions/checkout@v3

      # Debugowanie pierwszego kroku
      - name: Print test1
        run: echo "test1"

      # Ustawienie środowiska JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Budowanie aplikacji z użyciem Mavena
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Weryfikacja obecności plików
      - name: Verify files before SCP
        run: |
          ls -lh target/CityNewsBase-0.0.1-SNAPSHOT.jar
          ls -lh Dockerfile

      # Debugowanie klucza PEM (bezpieczne wyświetlenie informacji)
      - name: Debug PEM key
        run: |
          echo "Length of key:"
          echo "${{ secrets.AWS_PEM }}" | wc -c
          echo "First 10 characters of key:"
          echo "${{ secrets.AWS_PEM }}" | head -c 10
          echo "Last 10 characters of key:"
          echo "${{ secrets.AWS_PEM }}" | tail -c 10

      # Debugowanie połączenia SSH (ręczne użycie klucza)
      - name: Debug SSH connection
        run: |
          echo "${{ secrets.AWS_PEM }}" > key.pem
          chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 "echo 'SSH connection successful'"

      # Wysyłanie plików na EC2
      - name: Push application files to EC2
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no target/CityNewsBase-0.0.1-SNAPSHOT.jar ec2-user@51.20.68.13:~/app/
          scp -i key.pem -o StrictHostKeyChecking=no Dockerfile ec2-user@51.20.68.13:~/app/

      # Uruchamianie aplikacji na Dockerze
      - name: Run Docker container on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            cd ~/app/
            docker stop spring-boot-container || true
            docker rm spring-boot-container || true
            docker build -t my-spring-boot-app .
            docker run -d -p 80:8080 --name spring-boot-container my-spring-boot-app
          EOF

      # Testowanie statusu kontenera
      - name: Test container status on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            docker ps | grep spring-boot-container || exit 1
            docker logs spring-boot-container
          EOF
